package tests_test

import (
	"testing"

	"git.urbach.dev/cli/q/src/config"
)

var tests = []run{
	{"empty", nil, "", "", 0},
	{"assert", nil, "", "", 1},
	{"binary", nil, "", "", 0},
	{"octal", nil, "", "", 0},
	{"hexadecimal", nil, "", "", 0},
	{"rune", nil, "", "", 0},
	{"variables", nil, "", "", 0},
	{"reassign", nil, "", "", 0},
	{"reuse", nil, "", "", 0},
	{"return", nil, "", "", 0},
	{"add", nil, "", "", 0},
	{"sub", nil, "", "", 0},
	{"mul", nil, "", "", 0},
	{"div", nil, "", "", 0},
	{"sum", nil, "", "", 0},
	{"square-sum", nil, "", "", 0},
	{"math", nil, "", "", 0},
	{"bitwise-and", nil, "", "", 0},
	{"bitwise-or", nil, "", "", 0},
	{"bitwise-xor", nil, "", "", 0},
	{"unsigned", nil, "", "", 0},
	{"shift", nil, "", "", 0},
	{"shift-register", nil, "", "", 0},
	{"shift-sign", nil, "", "", 0},
	{"modulo", nil, "", "", 0},
	{"negative", nil, "", "", 0},
	{"negation", nil, "", "", 0},
	{"not", nil, "", "", 0},
	{"assign", nil, "", "", 0},
	{"limits", nil, "", "127\n-128\n32767\n-32768\n2147483647\n-2147483648\n9223372036854775807\n-9223372036854775808\n", 0},
	{"overflow", nil, "", "", 0},
	{"underflow", nil, "", "", 0},
	{"param", nil, "", "", 0},
	{"param-multi", nil, "", "", 0},
	{"param-order", nil, "", "", 0},
	{"branch", nil, "", "", 0},
	{"branch-and", nil, "", "", 0},
	{"branch-or", nil, "", "", 0},
	{"branch-both", nil, "", "", 0},
	{"jump-near", nil, "", "", 0},
	{"switch", nil, "", "", 0},
	{"phi", nil, "", "", 0},
	{"phi-simple", nil, "", "", 0},
	{"phi-advanced", nil, "", "", 0},
	{"phi-reassign", nil, "", "", 0},
	{"phi-reassign-output", nil, "", "12345", 0},
	{"hello", nil, "", "Hello\nHello\nHello\n", 0},
	{"escape", nil, "", "a\tb\nc\td\n", 0},
	{"script", nil, "", "Hello\n", 0},
	{"loop", nil, "", "..........", 0},
	{"loop-stacked", nil, "", "..........", 0},
	{"loop-count", nil, "", "", 0},
	{"loop-write", nil, "", "..........", 0},
	{"loop-optimize-single-iterator", nil, "", "", 0},
	{"loop-limit", nil, "", "", 0},
	{"loop-limit-dynamic", nil, "", "", 0},
	{"loop-keepalive-outside", nil, "", "", 0},
	{"loop-keepalive-inside", nil, "", "", 0},
	{"loop-copy-from", nil, "", "", 0},
	{"loop-copy-until", nil, "", "", 0},
	{"loop-modify-struct", nil, "", "12345", 0},
	{"loop-infinite-lifetime", nil, "", "", -1},
	{"loop-next", nil, "", "0\n2\n4\n6\n8\n", 0},
	{"factorial", nil, "", "", 0},
	{"fibonacci", nil, "", "", 0},
	{"memory", nil, "", "Hello\n", 0},
	{"out-of-memory", nil, "", "", 1},
	{"index-static", nil, "", "", 0},
	{"index-dynamic", nil, "", "", 0},
	{"struct-by-reference", nil, "", "", 0},
	{"struct-by-value", nil, "", "", 0},
	{"struct-return-reference", nil, "", "", 0},
	{"struct-return-value", nil, "", "", 0},
	{"struct-copy", nil, "", "", 0},
	{"struct-pointer-deref", nil, "", "", 0},
	{"struct-modify-branch", nil, "", "", 0},
	{"string-by-value", nil, "", "Hello\n", 0},
	{"circle", nil, "", "", 0},
	{"circle-by-reference", nil, "", "", 0},
	{"color-8", nil, "", "", 0},
	{"color-16", nil, "", "", 0},
	{"color-32", nil, "", "", 0},
	{"color-64", nil, "", "", 0},
	{"return-2", nil, "", "", 0},
	{"return-3", nil, "", "", 0},
	{"return-4", nil, "", "", 0},
	{"return-string", nil, "", "Hello\n", 0},
	{"multi-define-assign", nil, "", "", 0},
	{"ignore-error", nil, "", "", 0},
	{"ignore-unused-field", nil, "", "", 0},
	{"slice", nil, "", "Hello World", 0},
	{"file-read", nil, "", "", 0},
	{"strings-equal", nil, "", "", 0},
	{"strings-index", nil, "", "", 0},
	{"strings-cut", nil, "", "", 0},
	{"strings-trim", nil, "", "", 0},
	{"strings-prefix", nil, "", "", 0},
	{"strings-suffix", nil, "", "", 0},
	{"strings-concat", nil, "", "", 0},
	{"reorder-add", nil, "", "", 0},
	{"free-registers", nil, "", "", 0},
	{"overload", nil, "", "", 0},
	{"resource", nil, "", "", 0},
	{"function-pointer", nil, "", "", 0},
	{"type-cast", nil, "", "", 0},
	{"array-int", nil, "", "", 0},
	{"array-int-custom", nil, "", "", 0},
	{"array-int-parameter", nil, "", "", 0},
	{"array-int-fixed-offset", nil, "", "127\n128\n4095\n4096\n", 0},
	{"array-struct", nil, "", "", 0},
	{"array-struct-copy", nil, "", "", 0},
	{"array-struct-copy-call", nil, "", "", 0},
	{"array-string", nil, "", "HelloWorld", 0},
	{"pointer-to-pointer", nil, "", "", 0},
	{"stack-pointer", nil, "", "", 0},
	{"global", nil, "", "", 0},
}

func TestTests(t *testing.T) {
	for _, test := range tests {
		build := config.New(test.Name + ".q")
		build.Lint(false)
		test.Run(t, build)
	}
}