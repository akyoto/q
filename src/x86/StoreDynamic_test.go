package x86_test

import (
	"testing"

	"git.urbach.dev/cli/q/src/cpu"
	"git.urbach.dev/cli/q/src/x86"
	"git.urbach.dev/go/assert"
)

func TestStoreDynamicNumber(t *testing.T) {
	usagePatterns := []struct {
		RegisterTo cpu.Register
		Offset     cpu.Register
		Scale      x86.Scale
		Length     byte
		Number     int
		Code       []byte
	}{
		{x86.R0, x86.R15, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x38, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R0, x86.R15, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x38, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R0, x86.R15, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x38, 0x7F, 0x00}},
		{x86.R0, x86.R15, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x38, 0x7F}},
		{x86.R1, x86.R14, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x31, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R1, x86.R14, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x31, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R1, x86.R14, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x31, 0x7F, 0x00}},
		{x86.R1, x86.R14, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x31, 0x7F}},
		{x86.R2, x86.R13, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x2A, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R2, x86.R13, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x2A, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R2, x86.R13, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x2A, 0x7F, 0x00}},
		{x86.R2, x86.R13, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x2A, 0x7F}},
		{x86.R3, x86.R12, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x23, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R3, x86.R12, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x23, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R3, x86.R12, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x23, 0x7F, 0x00}},
		{x86.R3, x86.R12, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x23, 0x7F}},
		{x86.SP, x86.R11, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x1C, 0x7F, 0x00, 0x00, 0x00}},
		{x86.SP, x86.R11, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x1C, 0x7F, 0x00, 0x00, 0x00}},
		{x86.SP, x86.R11, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x1C, 0x7F, 0x00}},
		{x86.SP, x86.R11, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x1C, 0x7F}},
		{x86.R5, x86.R10, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x44, 0x15, 0x00, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R5, x86.R10, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x44, 0x15, 0x00, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R5, x86.R10, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x44, 0x15, 0x00, 0x7F, 0x00}},
		{x86.R5, x86.R10, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x44, 0x15, 0x00, 0x7F}},
		{x86.R6, x86.R9, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x0E, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R6, x86.R9, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x0E, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R6, x86.R9, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x0E, 0x7F, 0x00}},
		{x86.R6, x86.R9, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x0E, 0x7F}},
		{x86.R7, x86.R8, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x07, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R7, x86.R8, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x07, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R7, x86.R8, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x07, 0x7F, 0x00}},
		{x86.R7, x86.R8, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x07, 0x7F}},
		{x86.R8, x86.R7, x86.Scale1, 8, 0x7F, []byte{0x49, 0xC7, 0x04, 0x38, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R8, x86.R7, x86.Scale1, 4, 0x7F, []byte{0x41, 0xC7, 0x04, 0x38, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R8, x86.R7, x86.Scale1, 2, 0x7F, []byte{0x66, 0x41, 0xC7, 0x04, 0x38, 0x7F, 0x00}},
		{x86.R8, x86.R7, x86.Scale1, 1, 0x7F, []byte{0x41, 0xC6, 0x04, 0x38, 0x7F}},
		{x86.R9, x86.R6, x86.Scale1, 8, 0x7F, []byte{0x49, 0xC7, 0x04, 0x31, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R9, x86.R6, x86.Scale1, 4, 0x7F, []byte{0x41, 0xC7, 0x04, 0x31, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R9, x86.R6, x86.Scale1, 2, 0x7F, []byte{0x66, 0x41, 0xC7, 0x04, 0x31, 0x7F, 0x00}},
		{x86.R9, x86.R6, x86.Scale1, 1, 0x7F, []byte{0x41, 0xC6, 0x04, 0x31, 0x7F}},
		{x86.R10, x86.R5, x86.Scale1, 8, 0x7F, []byte{0x49, 0xC7, 0x04, 0x2A, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R10, x86.R5, x86.Scale1, 4, 0x7F, []byte{0x41, 0xC7, 0x04, 0x2A, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R10, x86.R5, x86.Scale1, 2, 0x7F, []byte{0x66, 0x41, 0xC7, 0x04, 0x2A, 0x7F, 0x00}},
		{x86.R10, x86.R5, x86.Scale1, 1, 0x7F, []byte{0x41, 0xC6, 0x04, 0x2A, 0x7F}},
		{x86.R11, x86.SP, x86.Scale1, 8, 0x7F, []byte{0x4A, 0xC7, 0x04, 0x1C, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R11, x86.SP, x86.Scale1, 4, 0x7F, []byte{0x42, 0xC7, 0x04, 0x1C, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R11, x86.SP, x86.Scale1, 2, 0x7F, []byte{0x66, 0x42, 0xC7, 0x04, 0x1C, 0x7F, 0x00}},
		{x86.R11, x86.SP, x86.Scale1, 1, 0x7F, []byte{0x42, 0xC6, 0x04, 0x1C, 0x7F}},
		{x86.R12, x86.R3, x86.Scale1, 8, 0x7F, []byte{0x49, 0xC7, 0x04, 0x1C, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R12, x86.R3, x86.Scale1, 4, 0x7F, []byte{0x41, 0xC7, 0x04, 0x1C, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R12, x86.R3, x86.Scale1, 2, 0x7F, []byte{0x66, 0x41, 0xC7, 0x04, 0x1C, 0x7F, 0x00}},
		{x86.R12, x86.R3, x86.Scale1, 1, 0x7F, []byte{0x41, 0xC6, 0x04, 0x1C, 0x7F}},
		{x86.R13, x86.R2, x86.Scale1, 8, 0x7F, []byte{0x49, 0xC7, 0x44, 0x15, 0x00, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R13, x86.R2, x86.Scale1, 4, 0x7F, []byte{0x41, 0xC7, 0x44, 0x15, 0x00, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R13, x86.R2, x86.Scale1, 2, 0x7F, []byte{0x66, 0x41, 0xC7, 0x44, 0x15, 0x00, 0x7F, 0x00}},
		{x86.R13, x86.R2, x86.Scale1, 1, 0x7F, []byte{0x41, 0xC6, 0x44, 0x15, 0x00, 0x7F}},
		{x86.R14, x86.R1, x86.Scale1, 8, 0x7F, []byte{0x49, 0xC7, 0x04, 0x0E, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R14, x86.R1, x86.Scale1, 4, 0x7F, []byte{0x41, 0xC7, 0x04, 0x0E, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R14, x86.R1, x86.Scale1, 2, 0x7F, []byte{0x66, 0x41, 0xC7, 0x04, 0x0E, 0x7F, 0x00}},
		{x86.R14, x86.R1, x86.Scale1, 1, 0x7F, []byte{0x41, 0xC6, 0x04, 0x0E, 0x7F}},
		{x86.R15, x86.R0, x86.Scale1, 8, 0x7F, []byte{0x49, 0xC7, 0x04, 0x07, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R15, x86.R0, x86.Scale1, 4, 0x7F, []byte{0x41, 0xC7, 0x04, 0x07, 0x7F, 0x00, 0x00, 0x00}},
		{x86.R15, x86.R0, x86.Scale1, 2, 0x7F, []byte{0x66, 0x41, 0xC7, 0x04, 0x07, 0x7F, 0x00}},
		{x86.R15, x86.R0, x86.Scale1, 1, 0x7F, []byte{0x41, 0xC6, 0x04, 0x07, 0x7F}},
	}

	for _, pattern := range usagePatterns {
		t.Logf("store %dB [%s+%s], %d", pattern.Length, pattern.RegisterTo, pattern.Offset, pattern.Number)
		code := x86.StoreDynamicNumber(nil, pattern.RegisterTo, pattern.Offset, pattern.Scale, pattern.Length, pattern.Number)
		assert.DeepEqual(t, code, pattern.Code)
	}
}

func TestStoreDynamicRegister(t *testing.T) {
	usagePatterns := []struct {
		RegisterTo   cpu.Register
		Offset       cpu.Register
		Scale        x86.Scale
		Length       byte
		RegisterFrom cpu.Register
		Code         []byte
	}{
		{x86.R0, x86.R15, x86.Scale1, 8, x86.R15, []byte{0x4E, 0x89, 0x3C, 0x38}},
		{x86.R0, x86.R15, x86.Scale1, 4, x86.R15, []byte{0x46, 0x89, 0x3C, 0x38}},
		{x86.R0, x86.R15, x86.Scale1, 2, x86.R15, []byte{0x66, 0x46, 0x89, 0x3C, 0x38}},
		{x86.R0, x86.R15, x86.Scale1, 1, x86.R15, []byte{0x46, 0x88, 0x3C, 0x38}},
		{x86.R1, x86.R14, x86.Scale1, 8, x86.R14, []byte{0x4E, 0x89, 0x34, 0x31}},
		{x86.R1, x86.R14, x86.Scale1, 4, x86.R14, []byte{0x46, 0x89, 0x34, 0x31}},
		{x86.R1, x86.R14, x86.Scale1, 2, x86.R14, []byte{0x66, 0x46, 0x89, 0x34, 0x31}},
		{x86.R1, x86.R14, x86.Scale1, 1, x86.R14, []byte{0x46, 0x88, 0x34, 0x31}},
		{x86.R2, x86.R13, x86.Scale1, 8, x86.R13, []byte{0x4E, 0x89, 0x2C, 0x2A}},
		{x86.R2, x86.R13, x86.Scale1, 4, x86.R13, []byte{0x46, 0x89, 0x2C, 0x2A}},
		{x86.R2, x86.R13, x86.Scale1, 2, x86.R13, []byte{0x66, 0x46, 0x89, 0x2C, 0x2A}},
		{x86.R2, x86.R13, x86.Scale1, 1, x86.R13, []byte{0x46, 0x88, 0x2C, 0x2A}},
		{x86.R3, x86.R12, x86.Scale1, 8, x86.R12, []byte{0x4E, 0x89, 0x24, 0x23}},
		{x86.R3, x86.R12, x86.Scale1, 4, x86.R12, []byte{0x46, 0x89, 0x24, 0x23}},
		{x86.R3, x86.R12, x86.Scale1, 2, x86.R12, []byte{0x66, 0x46, 0x89, 0x24, 0x23}},
		{x86.R3, x86.R12, x86.Scale1, 1, x86.R12, []byte{0x46, 0x88, 0x24, 0x23}},
		{x86.SP, x86.R11, x86.Scale1, 8, x86.R11, []byte{0x4E, 0x89, 0x1C, 0x1C}},
		{x86.SP, x86.R11, x86.Scale1, 4, x86.R11, []byte{0x46, 0x89, 0x1C, 0x1C}},
		{x86.SP, x86.R11, x86.Scale1, 2, x86.R11, []byte{0x66, 0x46, 0x89, 0x1C, 0x1C}},
		{x86.SP, x86.R11, x86.Scale1, 1, x86.R11, []byte{0x46, 0x88, 0x1C, 0x1C}},
		{x86.R5, x86.R10, x86.Scale1, 8, x86.R10, []byte{0x4E, 0x89, 0x54, 0x15, 0x00}},
		{x86.R5, x86.R10, x86.Scale1, 4, x86.R10, []byte{0x46, 0x89, 0x54, 0x15, 0x00}},
		{x86.R5, x86.R10, x86.Scale1, 2, x86.R10, []byte{0x66, 0x46, 0x89, 0x54, 0x15, 0x00}},
		{x86.R5, x86.R10, x86.Scale1, 1, x86.R10, []byte{0x46, 0x88, 0x54, 0x15, 0x00}},
		{x86.R6, x86.R9, x86.Scale1, 8, x86.R9, []byte{0x4E, 0x89, 0x0C, 0x0E}},
		{x86.R6, x86.R9, x86.Scale1, 4, x86.R9, []byte{0x46, 0x89, 0x0C, 0x0E}},
		{x86.R6, x86.R9, x86.Scale1, 2, x86.R9, []byte{0x66, 0x46, 0x89, 0x0C, 0x0E}},
		{x86.R6, x86.R9, x86.Scale1, 1, x86.R9, []byte{0x46, 0x88, 0x0C, 0x0E}},
		{x86.R7, x86.R8, x86.Scale1, 8, x86.R8, []byte{0x4E, 0x89, 0x04, 0x07}},
		{x86.R7, x86.R8, x86.Scale1, 4, x86.R8, []byte{0x46, 0x89, 0x04, 0x07}},
		{x86.R7, x86.R8, x86.Scale1, 2, x86.R8, []byte{0x66, 0x46, 0x89, 0x04, 0x07}},
		{x86.R7, x86.R8, x86.Scale1, 1, x86.R8, []byte{0x46, 0x88, 0x04, 0x07}},
		{x86.R8, x86.R7, x86.Scale1, 8, x86.R7, []byte{0x49, 0x89, 0x3C, 0x38}},
		{x86.R8, x86.R7, x86.Scale1, 4, x86.R7, []byte{0x41, 0x89, 0x3C, 0x38}},
		{x86.R8, x86.R7, x86.Scale1, 2, x86.R7, []byte{0x66, 0x41, 0x89, 0x3C, 0x38}},
		{x86.R8, x86.R7, x86.Scale1, 1, x86.R7, []byte{0x41, 0x88, 0x3C, 0x38}},
		{x86.R9, x86.R6, x86.Scale1, 8, x86.R6, []byte{0x49, 0x89, 0x34, 0x31}},
		{x86.R9, x86.R6, x86.Scale1, 4, x86.R6, []byte{0x41, 0x89, 0x34, 0x31}},
		{x86.R9, x86.R6, x86.Scale1, 2, x86.R6, []byte{0x66, 0x41, 0x89, 0x34, 0x31}},
		{x86.R9, x86.R6, x86.Scale1, 1, x86.R6, []byte{0x41, 0x88, 0x34, 0x31}},
		{x86.R10, x86.R5, x86.Scale1, 8, x86.R5, []byte{0x49, 0x89, 0x2C, 0x2A}},
		{x86.R10, x86.R5, x86.Scale1, 4, x86.R5, []byte{0x41, 0x89, 0x2C, 0x2A}},
		{x86.R10, x86.R5, x86.Scale1, 2, x86.R5, []byte{0x66, 0x41, 0x89, 0x2C, 0x2A}},
		{x86.R10, x86.R5, x86.Scale1, 1, x86.R5, []byte{0x41, 0x88, 0x2C, 0x2A}},
		{x86.R11, x86.SP, x86.Scale1, 8, x86.SP, []byte{0x4A, 0x89, 0x24, 0x1C}},
		{x86.R11, x86.SP, x86.Scale1, 4, x86.SP, []byte{0x42, 0x89, 0x24, 0x1C}},
		{x86.R11, x86.SP, x86.Scale1, 2, x86.SP, []byte{0x66, 0x42, 0x89, 0x24, 0x1C}},
		{x86.R11, x86.SP, x86.Scale1, 1, x86.SP, []byte{0x42, 0x88, 0x24, 0x1C}},
		{x86.R12, x86.R3, x86.Scale1, 8, x86.R3, []byte{0x49, 0x89, 0x1C, 0x1C}},
		{x86.R12, x86.R3, x86.Scale1, 4, x86.R3, []byte{0x41, 0x89, 0x1C, 0x1C}},
		{x86.R12, x86.R3, x86.Scale1, 2, x86.R3, []byte{0x66, 0x41, 0x89, 0x1C, 0x1C}},
		{x86.R12, x86.R3, x86.Scale1, 1, x86.R3, []byte{0x41, 0x88, 0x1C, 0x1C}},
		{x86.R13, x86.R2, x86.Scale1, 8, x86.R2, []byte{0x49, 0x89, 0x54, 0x15, 0x00}},
		{x86.R13, x86.R2, x86.Scale1, 4, x86.R2, []byte{0x41, 0x89, 0x54, 0x15, 0x00}},
		{x86.R13, x86.R2, x86.Scale1, 2, x86.R2, []byte{0x66, 0x41, 0x89, 0x54, 0x15, 0x00}},
		{x86.R13, x86.R2, x86.Scale1, 1, x86.R2, []byte{0x41, 0x88, 0x54, 0x15, 0x00}},
		{x86.R14, x86.R1, x86.Scale1, 8, x86.R1, []byte{0x49, 0x89, 0x0C, 0x0E}},
		{x86.R14, x86.R1, x86.Scale1, 4, x86.R1, []byte{0x41, 0x89, 0x0C, 0x0E}},
		{x86.R14, x86.R1, x86.Scale1, 2, x86.R1, []byte{0x66, 0x41, 0x89, 0x0C, 0x0E}},
		{x86.R14, x86.R1, x86.Scale1, 1, x86.R1, []byte{0x41, 0x88, 0x0C, 0x0E}},
		{x86.R15, x86.R0, x86.Scale1, 8, x86.R0, []byte{0x49, 0x89, 0x04, 0x07}},
		{x86.R15, x86.R0, x86.Scale1, 4, x86.R0, []byte{0x41, 0x89, 0x04, 0x07}},
		{x86.R15, x86.R0, x86.Scale1, 2, x86.R0, []byte{0x66, 0x41, 0x89, 0x04, 0x07}},
		{x86.R15, x86.R0, x86.Scale1, 1, x86.R0, []byte{0x41, 0x88, 0x04, 0x07}},
	}

	for _, pattern := range usagePatterns {
		t.Logf("store %dB [%s+%s], %s", pattern.Length, pattern.RegisterTo, pattern.Offset, pattern.RegisterFrom)
		code := x86.StoreDynamicRegister(nil, pattern.RegisterTo, pattern.Offset, pattern.Scale, pattern.Length, pattern.RegisterFrom)
		assert.DeepEqual(t, code, pattern.Code)
	}
}